import java.util.Arrays;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;

public class Cherry_pickup_741 {


    public static void main(String[] args) {
//[[0,0,1,0,0,1,0,1,1,-1,0,0,-1,-1,0,1,1,-1,0,-1],[1,1,1,0,1,0,0,0,0,1,1,1,1,1,1,1,0,0,1,0],[1,0,1,1,0,0,1,0,0,0,1,0,1,1,1,-1,0,1,1,0],[0,1,1,0,0,
// 0,1,0,1,1,0,-1,1,0,0,1,0,0,1,1],[-1,0,-1,1,0,0,1,1,0,0,1,1,0,-1,1,0,0,0,1,1],[0,0,1,0,1,1,0,0,1,0,0,1,0,1,1,1,1,1,1,0],[0,0,0,1,0,1,1,0,0,1,1,
// -1,1,0,1,1,0,1,1,0],[0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,1,0,1,1],[0,0,0,-1,1,0,0,1,0,0,1,1,1,1,0,0,0,1,1,0],[1,0,1,1,1,0,0,1,1,0,1,0,0,0,-1,0,-1,0,
// 1,0],[0,1,-1,1,1,1,1,0,1,0,0,1,1,0,-1,1,0,0,-1,0],[0,0,0,0,1,0,1,0,0,-1,0,1,0,-1,0,0,1,0,1,1],[1,-1,-1,0,0,1,1,1,0,1,1,1,1,1,1,0,0,0,1,0],[-1,0,
// 1,1,1,1,1,1,0,1,1,1,1,1,0,0,1,0,1,0],[0,1,-1,1,1,1,0,0,1,-1,1,1,0,1,0,1,0,-1,1,0],[1,-1,1,0,1,1,1,0,0,0,1,1,1,1,-1,0,0,1,0,-1],[-1,1,0,0,0,1,1,
// 1,1,1,0,1,1,-1,0,1,0,0,1,0],[0,0,0,-1,0,1,0,0,0,0,0,0,1,0,1,1,0,0,0,1],[0,1,0,0,0,0,0,0,0,1,1,1,1,0,0,1,0,0,0,1],[0,0,0,1,-1,0,-1,1,0,1,0,0,0,0,
// 1,0,0,1,-1,0]]

        int[][] grid = new int[][]{{0, 0, 1, 0, 0, 1, 0, 1, 1, -1, 0, 0, -1, -1, 0, 1, 1, -1, 0, -1}, {1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1,
                1, 0, 0, 1, 0}, {1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, -1, 0, 1, 1, 0}, {0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, -1, 1, 0, 0, 1, 0,
                0, 1, 1}, {-1, 0, -1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, -1, 1, 0, 0, 0, 1, 1}, {0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1
                , 0}, {0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, -1, 1, 0, 1, 1, 0, 1, 1, 0}, {0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1},
                {0, 0, 0, -1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0}, {1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, -1, 0, -1, 0, 1, 0}, {0,
                1, -1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, -1, 1, 0, 0, -1, 0}, {0, 0, 0, 0, 1, 0, 1, 0, 0, -1, 0, 1, 0, -1, 0, 0, 1, 0, 1, 1}, {1, -1
                , -1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0}, {-1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0}, {0, 1, -1,
                1, 1, 1, 0, 0, 1, -1, 1, 1, 0, 1, 0, 1, 0, -1, 1, 0}, {1, -1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, -1, 0, 0, 1, 0, -1}, {-1, 1, 0, 0
                , 0, 1, 1, 1, 1, 1, 0, 1, 1, -1, 0, 1, 0, 0, 1, 0}, {0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1}, {0, 1, 0, 0, 0,
                0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1}, {0, 0, 0, 1, -1, 0, -1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, -1, 0}};


        System.out.println(new Solution().cherryPickup(grid));
    }


    static class Solution {
        private int max;

        public int cherryPickup(int[][] grid) {
            int length = grid.length;
            int[][][][] picked = new int[length + 1][length + 1][length + 1][length + 1];
            for (int x1 = 0; x1 <= length; x1++) {
                for (int x2 = 0; x2 <= length; x2++) {
                    for (int x3 = 0; x3 <= length; x3++) {
                        for (int x4 = 0; x4 <= length; x4++) {
                            picked[x1][x2][x3][x4] = Integer.MIN_VALUE;
                        }
                    }
                }
            }

            picked[1][1][1][1] = grid[0][0];
            for (int x1 = 1; x1 <= length; x1++) {
                for (int y1 = 1; y1 <= length; y1++) {
                    for (int x2 = 1; x2 <= length; x2++) {
                        int y2 = x1 + y1 - x2;

                        if (y2 < 1 || y2 > length) {
                            continue;
                        }

                        int val1 = grid[x1 - 1][y1 - 1];
                        int val2 = grid[x2 - 1][y2 - 1];
                        if (val1 == -1 || val2 == -1) {
                            continue;
                        }

                        int max = Math.max(Math.max(picked[x1-1][y1][x2-1][y2], picked[x1-1][y1][x2][y2-1]),
                                Math.max(picked[x1][y1-1][x2-1][y2], picked[x1][y1-1][x2][y2-1]));

                        if (max < 0) {
                            continue;
                        }

                        picked[x1][y1][x2][y2] = max + val1 + val2 - (x1 == x2 && y1 == y2 ? val1 : 0);
                    }

                }
            }

            return Math.max(0, picked[length][length][length][length]);
        }
    }
}

